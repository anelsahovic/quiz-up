generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  role          Role      @default(PLAYER)
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Result Result[]
}

model Question {
  id            String          @id @default(uuid())
  question      String
  options       String[]
  correctAnswer Int
  category      Category        @relation(fields: [categoryId], references: [id])
  difficulty    DifficultyLevel

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  categoryId String
}

model Result {
  id                String          @id @default(uuid())
  userId            String
  user              User            @relation(fields: [userId], references: [id])
  numberOfQuestions Int
  correctlyAnswered Int
  category          Category        @relation(fields: [categoryId], references: [id])
  difficulty        DifficultyLevel
  points            Int

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  categoryId String
}

model Category {
  id       String     @id @default(uuid())
  name     String     @unique
  Question Question[]
  Result   Result[]
}

enum Role {
  ADMIN
  PLAYER
}

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
